import { useState, useCallback } from "react";
import ContactsTable from "./ContactsTable";
import ContactModal from "../components/ContactModal";
import DeleteModal from "../components/DeleteModal";
import { useDisclosure, Button, Input } from "@nextui-org/react";
import { useAppContext } from "../context/useAppContext";
import { useContacts } from "../hooks/useContacts";
import { Id } from "../../convex/_generated/dataModel";
import CustomNavbar from "../components/CustomNavbar";
import { useMutation } from "convex/react";
import { api } from "../../convex/_generated/api";
import { useAddress } from "@thirdweb-dev/react";
// import { User } from "../types";

const MainView = () => {
  const [modalMode, setModalMode] = useState("view");
  const { setSelectedContact, setEditableContact, userId } = useAppContext();
  const { isOpen, onOpen, onClose } = useDisclosure();
  const { getContacts, deleteContact } = useContacts({ userId: userId || "" });
  const contacts = getContacts;
  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
  const [contactToDelete, setContactToDelete] = useState<string | null>(null);

  const createUser = useMutation(api.users.createUser);

  const handleOpen = (key: string) => {
    if (key === "create") {
      setEditableContact({
        _id: "", // generated by backend
        userId: userId ?? "",
        name: "",
        email: "",
        phone: "",
        position: "",
        company: "",
        location: "",
        description: "",
        avatar: "",
        team: "",
        status: "",
      });
      setModalMode("create");
      onOpen();
    } else {
      const selected = contacts?.find((contact) => contact._id === key) ?? null;
      setSelectedContact(selected);
      onOpen();
    }
  };

  const handleClose = () => {
    setSelectedContact(null);
    setModalMode("view");
    onClose();
  };

  const confirmDelete = useCallback(() => {
    if (contactToDelete) {
      deleteContact({ id: contactToDelete as Id<"contacts"> })
        .then(() => {
          // You might want to refresh the contacts list here or show a success message
        })
        .finally(() => {
          setIsDeleteModalVisible(false);
          setContactToDelete(null);
        });
    }
  }, [contactToDelete, deleteContact]);

  const cancelDelete = useCallback(() => {
    setIsDeleteModalVisible(false);
    setContactToDelete(null);
  }, []);

  const [name, setName] = useState("");
  const address = useAddress();
  if (!userId) {
    return (
      <div className="flex flex-col items-center justify-center h-screen">
        <h1>Welcome</h1>
        <h2>Please enter your name to continue</h2>
        <Input
          fullWidth
          color="primary"
          size="lg"
          placeholder="Your Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
          className="mt-4"
        />
        <Button
          className="mt-4"
          onPress={() => {
            if (!address || !name) {
              return;
            }
            const newUser = {
              name: name,
              walletAddress: address,
            };
            createUser({
              user: newUser,
            }).then((result) => {
              console.log(result);
              // setUserId(result.data._id);
            });
          }}
        >
          Submit
        </Button>
      </div>
    );
  }

  console.log("ADDRESS:", address);

  return (
    <>
      <div style={{ display: "flex", flexDirection: "column", width: "100vw" }}>
        <CustomNavbar />
        <ContactsTable
          key={contacts ? contacts.length : 0}
          contacts={contacts}
          handleOpen={handleOpen}
          setIsDeleteModalVisible={setIsDeleteModalVisible}
          setContactToDelete={setContactToDelete}
        ></ContactsTable>
        <ContactModal
          modalMode={modalMode}
          setModalMode={setModalMode}
          isOpen={isOpen}
          onClose={onClose}
          handleClose={handleClose}
        ></ContactModal>
        <DeleteModal
          isDeleteModalVisible={isDeleteModalVisible}
          cancelDelete={cancelDelete}
          confirmDelete={confirmDelete}
        ></DeleteModal>
      </div>
    </>
  );
};

export default MainView;
