import React, { useState, useMemo, useCallback } from "react";
import { useAppContext } from "../context/useAppContext";
import ContactCard from "../components/ContactCard";
import ContactDetails from "../components/ContactDetails";
import InteractionLog from "../components/InteractionLog";
import InteractionForm from "../components/InteractionForm";
import { useContacts } from "../hooks/useContacts";
import {
  Table,
  TableHeader,
  TableColumn,
  TableBody,
  TableRow,
  TableCell,
  Input,
  Button,
  DropdownTrigger,
  Dropdown,
  DropdownMenu,
  DropdownItem,
  Chip,
  User,
  Pagination,
  Selection,
  ChipProps,
  SortDescriptor,
  Tooltip,
  useDisclosure,
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
} from "@nextui-org/react";
import { PlusIcon } from "../assets/PlusIcon";
import { VerticalDotsIcon } from "../assets/VerticalDotsIcon";
import { ChevronDownIcon } from "../assets/ChevronDownIcon";
import { SearchIcon } from "../assets/SearchIcon";
import { DeleteIcon } from "../assets/DeleteIcon";
import { EditIcon } from "../assets/EditIcon";
import { EyeIcon } from "../assets/EyeIcon";
import { Contact } from "../types";

const ContactView = () => {
  // const { setEditableContact, setMode, selectedContact, interactionMode } = useAppContext();

  const { getContacts } = useContacts();

  // const handleNewContactClick = () => {
  //   setEditableContact({
  //     _id: "", // generated by backend
  //     firstName: "",
  //     lastName: "",
  //     email: "",
  //     phone: "",
  //     position: "",
  //     company: "",
  //     location: "",
  //     description: "",
  //   });
  //   setMode("create");
  // };

  const contacts = getContacts;

  // if (selectedContact) {
  //   if (interactionMode === "view") {
  //     return (
  //       <>
  //         <ContactDetails contact={selectedContact} />
  //         <InteractionLog contactId={selectedContact._id} />
  //       </>
  //     );
  //   } else if (interactionMode === "edit" || interactionMode === "create") {
  //     return <InteractionForm contactId={selectedContact._id} />;
  //   } else {
  //     return null;
  //   }
  // } else {
  //   if (contacts) {
  //     return (
  //       <>
  //         <div className="contacts-grid">
  //           {contacts?.map((contact) => (
  //             <ContactCard key={contact._id} contact={contact} />
  //           ))}
  //         </div>
  //         <button onClick={handleNewContactClick}>New Contact</button>
  //       </>
  //     );
  //   } else {
  //     return <p>Loading contacts...</p>;
  //   }
  // }

  function capitalize(str: string) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  const columns = [
    { name: "ID", uid: "id", sortable: true },
    { name: "NAME", uid: "name", sortable: true },
    { name: "AGE", uid: "age", sortable: true },
    { name: "ROLE", uid: "role", sortable: true },
    { name: "TEAM", uid: "team" },
    { name: "EMAIL", uid: "email" },
    { name: "STATUS", uid: "status", sortable: true },
    { name: "ACTIONS", uid: "actions" },
  ];

  const statusOptions = [
    { name: "Active", uid: "active" },
    { name: "Paused", uid: "paused" },
    { name: "Vacation", uid: "vacation" },
  ];

  const statusColorMap: Record<string, ChipProps["color"]> = {
    active: "success",
    paused: "danger",
    vacation: "warning",
  };

  const INITIAL_VISIBLE_COLUMNS = ["name", "role", "status", "actions"];

  const [filterValue, setFilterValue] = useState("");
  const [selectedKey, setSelectedKey] = useState<Selection>(new Set([]));
  const [visibleColumns, setVisibleColumns] = useState<Selection>(new Set(INITIAL_VISIBLE_COLUMNS));
  const [statusFilter, setStatusFilter] = useState<Selection>("all");
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [sortDescriptor, setSortDescriptor] = useState<SortDescriptor>({
    column: "age",
    direction: "ascending",
  });
  const [selectedContact, setSelectedContact] = useState<Contact | null>(null);
  const [modalMode, setModalMode] = useState("view");

  const [page, setPage] = useState(1);

  const hasSearchFilter = Boolean(filterValue);

  const headerColumns = useMemo(() => {
    if (visibleColumns === "all") return columns;

    return columns.filter((column) => Array.from(visibleColumns).includes(column.uid));
  }, [visibleColumns]);

  const filteredItems = useMemo(() => {
    if (!contacts) return [];
    let filteredUsers = [...contacts];

    if (hasSearchFilter) {
      filteredUsers = filteredUsers.filter((user) =>
        user.name.toLowerCase().includes(filterValue.toLowerCase())
      );
    }
    if (statusFilter !== "all" && Array.from(statusFilter).length !== statusOptions.length) {
      filteredUsers = filteredUsers.filter((user) => Array.from(statusFilter).includes(user.status));
    }

    return filteredUsers;
  }, [contacts, filterValue, statusFilter]);

  const pages = Math.ceil(filteredItems.length / rowsPerPage);

  const items = useMemo(() => {
    const start = (page - 1) * rowsPerPage;
    const end = start + rowsPerPage;

    return filteredItems.slice(start, end);
  }, [page, filteredItems, rowsPerPage]);

  const sortedItems = useMemo(() => {
    return [...items].sort((a: Contact, b: Contact) => {
      const first = a[sortDescriptor.column as keyof Contact] as number;
      const second = b[sortDescriptor.column as keyof Contact] as number;
      const cmp = first < second ? -1 : first > second ? 1 : 0;

      return sortDescriptor.direction === "descending" ? -cmp : cmp;
    });
  }, [sortDescriptor, items]);

  const renderCell = useCallback((user: Contact, columnKey: React.Key) => {
    const cellValue = user[columnKey as keyof Contact];

    switch (columnKey) {
      case "name":
        return (
          <User avatarProps={{ radius: "lg", src: user.avatar }} description={user.email} name={cellValue}>
            {user.email}
          </User>
        );
      case "role":
        return (
          <div className="flex flex-col">
            <p className="text-bold text-small capitalize">{cellValue}</p>
            <p className="text-bold text-tiny capitalize text-default-400">{user.team}</p>
          </div>
        );
      case "status":
        return (
          <Chip className="capitalize" color={statusColorMap[user.status]} size="sm" variant="flat">
            {cellValue}
          </Chip>
        );
      case "actions":
        return (
          <div className="relative flex items-center gap-2">
            <Tooltip content="Details">
              <span className="text-lg text-default-400 cursor-pointer active:opacity-50">
                <EyeIcon />
              </span>
            </Tooltip>
            <Tooltip content="Edit user">
              <span className="text-lg text-default-400 cursor-pointer active:opacity-50">
                <EditIcon />
              </span>
            </Tooltip>
            <Tooltip color="danger" content="Delete user">
              <span className="text-lg text-danger cursor-pointer active:opacity-50">
                <DeleteIcon />
              </span>
            </Tooltip>
          </div>
        );
      default:
        return cellValue;
    }
  }, []);

  const onNextPage = useCallback(() => {
    if (page < pages) {
      setPage(page + 1);
    }
  }, [page, pages]);

  const onPreviousPage = useCallback(() => {
    if (page > 1) {
      setPage(page - 1);
    }
  }, [page]);

  const onRowsPerPageChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    setRowsPerPage(Number(e.target.value));
    setPage(1);
  }, []);

  const onSearchChange = useCallback((value?: string) => {
    if (value) {
      setFilterValue(value);
      setPage(1);
    } else {
      setFilterValue("");
    }
  }, []);

  const onClear = useCallback(() => {
    setFilterValue("");
    setPage(1);
  }, []);

  const { isOpen, onOpen, onClose } = useDisclosure();

  const handleOpen = (key: string) => {
    setSelectedContact(contacts?.find((contact) => contact._id === key) ?? null);
    onOpen();
  };

  const handleClose = () => {
    setSelectedContact(null);
    setModalMode("view");
    onClose();
  };

  const toggleModalMode = (mode) => {
    setModalMode(mode);
  };

  const topContent = useMemo(() => {
    return (
      <div className="flex flex-col gap-4">
        <div className="flex justify-between gap-3 items-end">
          <Input
            isClearable
            className="w-full sm:max-w-[44%]"
            placeholder="Search by name..."
            startContent={<SearchIcon />}
            value={filterValue}
            onClear={() => onClear()}
            onValueChange={onSearchChange}
          />
          <div className="flex gap-3">
            <Dropdown>
              <DropdownTrigger className="hidden sm:flex">
                <Button endContent={<ChevronDownIcon className="text-small" />} variant="flat">
                  Status
                </Button>
              </DropdownTrigger>
              <DropdownMenu
                disallowEmptySelection
                aria-label="Table Columns"
                closeOnSelect={false}
                selectedKeys={statusFilter}
                selectionMode="multiple"
                onSelectionChange={setStatusFilter}
              >
                {statusOptions.map((status) => (
                  <DropdownItem key={status.uid} className="capitalize">
                    {capitalize(status.name)}
                  </DropdownItem>
                ))}
              </DropdownMenu>
            </Dropdown>
            <Dropdown>
              <DropdownTrigger className="hidden sm:flex">
                <Button endContent={<ChevronDownIcon className="text-small" />} variant="flat">
                  Columns
                </Button>
              </DropdownTrigger>
              <DropdownMenu
                disallowEmptySelection
                aria-label="Table Columns"
                closeOnSelect={false}
                selectedKeys={visibleColumns}
                selectionMode="multiple"
                onSelectionChange={setVisibleColumns}
              >
                {columns.map((column) => (
                  <DropdownItem key={column.uid} className="capitalize">
                    {capitalize(column.name)}
                  </DropdownItem>
                ))}
              </DropdownMenu>
            </Dropdown>
            <Button color="primary" endContent={<PlusIcon />}>
              Add New
            </Button>
          </div>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-default-400 text-small">Total {contacts?.length ?? 0} users</span>
          <label className="flex items-center text-default-400 text-small">
            Rows per page:
            <select
              className="bg-transparent outline-none text-default-400 text-small"
              onChange={onRowsPerPageChange}
            >
              <option value="5">5</option>
              <option value="10">10</option>
              <option value="15">15</option>
            </select>
          </label>
        </div>
      </div>
    );
  }, [
    filterValue,
    statusFilter,
    visibleColumns,
    onSearchChange,
    onRowsPerPageChange,
    contacts?.length,
    hasSearchFilter,
  ]);

  const bottomContent = useMemo(() => {
    return (
      <div className="py-2 px-2 flex justify-between items-center">
        <span className="w-[30%] text-small text-default-400">
          {/* {selectedKeys === "all"
            ? "All items selected"
            : `${selectedKeys.size} of ${filteredItems.length} selected`} */}
        </span>
        <Pagination
          isCompact
          showControls
          showShadow
          color="primary"
          page={page}
          total={pages}
          onChange={setPage}
        />
        <div className="hidden sm:flex w-[30%] justify-end gap-2">
          <Button isDisabled={pages === 1} size="sm" variant="flat" onPress={onPreviousPage}>
            Previous
          </Button>
          <Button isDisabled={pages === 1} size="sm" variant="flat" onPress={onNextPage}>
            Next
          </Button>
        </div>
      </div>
    );
  }, [selectedKey, items.length, page, pages, hasSearchFilter]);

  if (contacts) {
    return (
      <>
        <Table
          aria-label="Example table with custom cells, pagination and sorting"
          isHeaderSticky
          bottomContent={bottomContent}
          bottomContentPlacement="outside"
          classNames={{
            wrapper: "max-h-[382px]",
          }}
          selectedKeys={selectedKey}
          selectionMode="multiple"
          selectionBehavior="replace"
          onRowAction={(key) => handleOpen(String(key))}
          sortDescriptor={sortDescriptor}
          topContent={topContent}
          topContentPlacement="outside"
          onSelectionChange={setSelectedKey}
          onSortChange={setSortDescriptor}
        >
          <TableHeader columns={headerColumns}>
            {(column) => (
              <TableColumn
                key={column.uid}
                align={column.uid === "actions" ? "center" : "start"}
                allowsSorting={column.sortable}
              >
                {column.name}
              </TableColumn>
            )}
          </TableHeader>
          <TableBody emptyContent={"No users found"} items={sortedItems}>
            {(item) => (
              <TableRow key={item._id}>
                {(columnKey) => <TableCell>{renderCell(item, columnKey)}</TableCell>}
              </TableRow>
            )}
          </TableBody>
        </Table>
        <Modal
          backdrop={"blur"}
          size="5xl"
          isOpen={isOpen}
          placement="auto"
          onClose={handleClose}
          isDismissable={false}
          isKeyboardDismissDisabled={true}
        >
          {/* <ModalContent>
            {(onClose) => (
              <>
                <ModalHeader className="flex flex-col gap-1">{selectedKey}</ModalHeader>
                <ModalBody>
                  {selectedContact && (
                    <div>
                      <p>Name: {selectedContact.name}</p>
                      <p>Position: {selectedContact.position}</p>
                      <p>Team: {selectedContact.team}</p>
                      <p>Email: {selectedContact.email}</p>
                      <p>Status: {selectedContact.status}</p>
                      <p>Location: {selectedContact.location}</p>
                      <p>Company: {selectedContact.company}</p>
                      <p>Phone: {selectedContact.phone}</p>
                      <p>Description: {selectedContact.description}</p>
                      <p>Avatar: {selectedContact.avatar}</p>
                    </div>
                  )}
                </ModalBody>
                <ModalFooter>
                  <Button color="danger" variant="light" onPress={onClose}>
                    Close
                  </Button>
                  <Button color="primary" onPress={onClose}>
                    Action
                  </Button>
                </ModalFooter>
              </>
            )}
          </ModalContent> */}
          <ModalContent>
            <ModalHeader className="flex flex-col gap-1">
              {modalMode === "view" ? "Contact Details" : "Edit Contact"}
            </ModalHeader>
            <ModalBody>
              {modalMode === "view" ? (
                selectedContact && (
                  <div>
                    <p>Name: {selectedContact.name}</p>
                    <p>Position: {selectedContact.position}</p>
                    <p>Team: {selectedContact.team}</p>
                    <p>Email: {selectedContact.email}</p>
                    <p>Status: {selectedContact.status}</p>
                    <p>Location: {selectedContact.location}</p>
                    <p>Company: {selectedContact.company}</p>
                    <p>Phone: {selectedContact.phone}</p>
                    <p>Description: {selectedContact.description}</p>
                    <p>Avatar: {selectedContact.avatar}</p>
                    <Button color="primary" onPress={() => toggleModalMode("edit")}>
                      Edit
                    </Button>
                  </div>
                )
              ) : (
                <form>
                  <Input size="md" type="text" label="Name" defaultValue={selectedContact?.name} />
                  <Input size="md" type="text" label="Position" defaultValue={selectedContact?.position} />
                  <Input size="md" type="text" label="Team" defaultValue={selectedContact?.team} />
                  <Input size="md" type="email" label="Email" defaultValue={selectedContact?.email} />
                  <Input size="md" type="text" label="Status" defaultValue={selectedContact?.status} />
                  <Input size="md" type="text" label="Location" defaultValue={selectedContact?.location} />
                  <Input size="md" type="text" label="Company" defaultValue={selectedContact?.company} />
                  <Input size="md" type="tel" label="Phone" defaultValue={selectedContact?.phone} />
                  <Input
                    size="md"
                    type="text"
                    label="Description"
                    defaultValue={selectedContact?.description}
                  />
                  <Input size="md" type="text" label="Avatar" defaultValue={selectedContact?.avatar} />
                </form>
              )}
            </ModalBody>
            <ModalFooter>
              {modalMode === "edit" ? (
                <>
                  <Button color="danger" variant="light" onPress={() => setModalMode("view")}>
                    Cancel
                  </Button>
                  <Button
                    color="primary"
                    onPress={() => {
                      /* Handle save logic here */
                    }}
                  >
                    Save
                  </Button>
                </>
              ) : (
                <Button color="danger" variant="light" onPress={onClose}>
                  Close
                </Button>
              )}
            </ModalFooter>
          </ModalContent>
        </Modal>
      </>
    );
  } else {
    return <p>Loading contacts...</p>;
  }
};

export default ContactView;
