// InteractionLog.tsx
import React from "react";
import { Interaction } from "../types";
import { useAppContext } from "../AppContext";
import { useInteractions } from "../hooks/useInteractions";

interface Props {
  contactId: string;
}

const InteractionLog: React.FC<Props> = ({ contactId }) => {
  const {
    selectedInteraction,
    selectedContact,
    setEditableInteraction,
    setInteractionMode,
    setSelectedInteraction,
  } = useAppContext();

  const { getInteractions } = useInteractions({ contactId });

  const handleNewInteractionClick = () => {
    setEditableInteraction({
      _id: "", // should be generated by backend?
      contactId: selectedContact?._id ?? "",
      type: "",
      datetime: "",
      notes: "",
    });
    setSelectedInteraction(null);
    setInteractionMode("create");
  };

  const handleInteractionEditClick = (interaction: Interaction) => {
    setSelectedInteraction(interaction);
    setEditableInteraction(selectedInteraction);
    setInteractionMode("edit");
  };

  const interactions = getInteractions;

  if (!interactions) {
    return <div>Loading interactions...</div>;
  }

  return (
    <div className="interaction-log">
      <h3>Interactions</h3>
      <ul>
        {interactions.map((interaction) => (
          <React.Fragment key={interaction._id}>
            <li>
              <p>
                <strong>Type:</strong> {interaction.type}
              </p>
              <p>
                <strong>Date:</strong> {interaction.datetime.slice(0, 10)}
              </p>
              <p>
                <strong>Notes:</strong> {interaction.notes}
              </p>
            </li>
            <button onClick={() => handleInteractionEditClick(interaction)}>Edit</button>
          </React.Fragment>
        ))}
      </ul>
      <button onClick={() => handleNewInteractionClick}>Add Interaction</button>
    </div>
  );
};

export default InteractionLog;
