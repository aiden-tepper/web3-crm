import React, { useState, useEffect } from "react";
import "./App.css";
import { useQuery, useMutation } from "convex/react";
import { api } from "../convex/_generated/api";
import ContactCard from './components/ContactCard';
import ContactDetails from './components/ContactDetails';
import ContactForm from "./components/ContactForm";
import { Contact } from './types';

function App() {
  // convex
  const contacts = useQuery(api.contacts.get) as Contact[];
  const updateContact = useMutation(api.contacts.update);
  const createContact = useMutation(api.contacts.create);

  // react
  const [selectedContact, setSelectedContact] = useState<Contact | null>(null);
  const [editableContact, setEditableContact] = useState<Contact | null>(null);
  const [mode, setMode] = useState<'create' | 'edit' | 'view'>('view');

  useEffect(() => {
    setEditableContact(selectedContact);
  }, [selectedContact]);

  const handleFieldChange = (field: keyof Contact, value: string) => {
    if (editableContact) {
      setEditableContact({ ...editableContact, [field]: value });
    }
  };

  const handleSave = () => {
    if (mode === 'create') {
      createContact({
        id: editableContact?._id,
        updates: {
          firstName: editableContact?.firstName,
          lastName: editableContact?.lastName,
          email: editableContact?.email,
          phone: editableContact?.phone,
          position: editableContact?.position,
          company: editableContact?.company,
          location: editableContact?.location,
          description: editableContact?.description
        }
      }).then((result) =>
        console.log(result)
      );
    } else if (mode === 'edit') {
      updateContact({
        id: editableContact?._id,
        updates: {
          firstName: editableContact?.firstName,
          lastName: editableContact?.lastName,
          email: editableContact?.email,
          phone: editableContact?.phone,
          position: editableContact?.position,
          company: editableContact?.company,
          location: editableContact?.location,
          description: editableContact?.description
        }
      }).then((result) =>
        console.log(result)
      );  
    }
    setMode('view');
  };

  const handleEditClick = () => {
    setEditableContact(selectedContact);
    setMode('edit');
  }

  const handleNewContactClick = () => {
    setEditableContact({
      _id: '', // should be generated by backend?
      firstName: '',
      lastName: '',
      email: '',
      phone: '',
      position: '',
      company: '',
      location: '',
      description: ''
    });
    setMode('create');
  };

  const handleCancel = () => {
    setMode('view');
  };

  return (
    <div>
      <h1>web3-crm</h1>
      {/* Contacts list and New Contact button */}
      {mode === 'view' && (
        <>
          {!selectedContact ? (
            <>
              <div className="contacts-grid">
                {contacts?.map((contact) => (
                  <ContactCard key={contact._id} contact={contact} onClick={() => setSelectedContact(contact)} />
                ))}
              </div>
              <button onClick={handleNewContactClick}>New Contact</button>
            </>
          ) : (
            <ContactDetails
              contact={selectedContact}
              onFieldChange={handleFieldChange}
              onBack={() => {
                setSelectedContact(null);
              }}
              onEdit={handleEditClick}
            />
          )}
        </>
      )}

      {/* Edit/Create contact form */}
      {(mode === 'edit' || mode === 'create') && (
        <ContactForm
          contact={editableContact}
          onFieldChange={handleFieldChange}
          onSubmit={handleSave}
          onCancel={handleCancel}
        />
      )}
    </div>
  );
}

export default App;